import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;

public class Main {
    
    private static final String ALGORITHM = "Blowfish";

    // Method to generate a Blowfish secret key
    public static SecretKey generateKey() throws Exception 
    {
        KeyGenerator keyGenerator = KeyGenerator.getInstance(ALGORITHM);
        keyGenerator.init(128); // Blowfish supports key sizes between 32 and 448 bits
        return keyGenerator.generateKey();
    }

    // Method to encrypt a plain text string using Blowfish
    public static String encrypt(String data, SecretKey key) throws Exception 
    {
        Cipher cipher = Cipher.getInstance(ALGORITHM);
        cipher.init(Cipher.ENCRYPT_MODE, key);
        byte[] encryptedBytes = cipher.doFinal(data.getBytes());
        return Base64.getEncoder().encodeToString(encryptedBytes);
    }

    // Method to decrypt an encrypted string using Blowfish
    public static String decrypt(String encryptedData, SecretKey key) throws Exception 
    {
        Cipher cipher = Cipher.getInstance(ALGORITHM);
        cipher.init(Cipher.DECRYPT_MODE, key);
        byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode(encryptedData));
        return new String(decryptedBytes);
    }

    public static void main(String[] args) 
    {
        try {
            String plainText = "Hello, World";
            
            // Generate Blowfish Key
            SecretKey secretKey = generateKey();

            // Encrypt the plain text
            String encryptedText = encrypt(plainText, secretKey);
            System.out.println("Encrypted Text: " + encryptedText);

            // Decrypt the encrypted text
            String decryptedText = decrypt(encryptedText, secretKey);
            System.out.println("Decrypted Text: " + decryptedText);
            
        } 
        catch (Exception e) 
        {
            e.printStackTrace();
        }
    }
}
